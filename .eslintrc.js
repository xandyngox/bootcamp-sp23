/** @type {import("eslint").Linter.Config} */
module.exports = {
  root: true,
  env: {
    node: true,
  },
  parser: "@typescript-eslint/parser",
  ignorePatterns: ["*.js", "*.cjs", "*.d.ts"],
  settings: {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"],
    },
    "import/resolver": {
      typescript: {
        alwaysTryTypes: true,
      },
    },
  },
  parserOptions: {
    tsconfigRootDir: ".",
    project: ["tsconfig.json"],
  },
  plugins: ["promise", "etc", "eslint-comments"],
  extends: [
    "eslint:recommended",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:prettier/recommended",
    "next/core-web-vitals",
  ],
  rules: {
    "no-warning-comments": "warn",
    "no-await-in-loop": "warn",
    "no-bitwise": "warn",
    "no-console": "warn",
    "array-callback-return": "error",
    "no-self-compare": "error",
    "no-template-curly-in-string": "error",
    "no-unmodified-loop-condition": "error",
    "no-unreachable": "error",
    "no-unreachable-loop": "error",
    "no-constant-binary-expression": "error",
    "no-var": "error",
    "no-lonely-if": "error",
    "no-undef-init": "error",
    eqeqeq: "error",
    "no-useless-return": "error",
    "operator-assignment": "error",
    "object-shorthand": "error",
    yoda: "error",
    "prefer-arrow-callback": "error",
    "prefer-object-spread": "error",
    "prefer-const": "error",
    "spaced-comment": ["error", "always"],
    "func-style": ["error", "declaration", { allowArrowFunctions: true }],
    "no-constant-condition": ["error", { checkLoops: false }],
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-floating-promises": "off",
    "@typescript-eslint/restrict-plus-operands": "off",
    "@typescript-eslint/prefer-for-of": "error",
    "@typescript-eslint/prefer-nullish-coalescing": "warn",
    "@typescript-eslint/no-empty-function": "warn",
    "@typescript-eslint/ban-ts-comment": "warn",
    "@typescript-eslint/prefer-string-starts-ends-with": "warn",
    "@typescript-eslint/require-await": "warn",
    "@typescript-eslint/no-misused-promises": "off",
    "@typescript-eslint/no-unsafe-member-access": "warn",
    "@typescript-eslint/no-unsafe-call": "warn",
    "@typescript-eslint/no-unsafe-argument": "warn",
    "@typescript-eslint/no-unused-vars": [
      "error",
      { args: "after-used", ignoreRestSiblings: true, argsIgnorePattern: "^_" },
    ],
    "@typescript-eslint/consistent-type-definitions": "error",
    "@typescript-eslint/consistent-type-assertions": "error",
    "@typescript-eslint/method-signature-style": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/prefer-ts-expect-error": "error",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/no-unused-expressions": "error",
    "@typescript-eslint/no-use-before-define": ["error", { functions: false }],
    "@typescript-eslint/dot-notation": "error",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        selector: "variableLike",
        format: ["camelCase", "PascalCase", "UPPER_CASE"],
        leadingUnderscore: "allow",
      },
      { selector: ["typeParameter", "interface"], format: ["PascalCase"] },
    ],
    "@next/next/no-html-link-for-pages": ["error"],
    "react/jsx-boolean-value": "error",
    "react/function-component-definition": "error",
    "react/jsx-pascal-case": "error",
    "react/jsx-curly-brace-presence": "error",
    "react/self-closing-comp": "error",
    "react/forbid-elements": [
      "warn",
      {
        forbid: [
          {
            element: "Link",
            message:
              "use one of the Link utility components instead (see https://github.com/web-at-berkeley/nextjs-template#utility-components)",
          },
        ],
      },
    ],
    "import/order": ["error", { "newlines-between": "always" }],
    "import/newline-after-import": "error",
    "import/no-duplicates": "error",
    "import/no-anonymous-default-export": "error",
    "promise/prefer-await-to-then": "error",
    "etc/no-commented-out-code": "error",
    "eslint-comments/no-unused-disable": "error",
    "eslint-comments/no-unlimited-disable": "error",
    "eslint-comments/no-use": "warn",
  },
};
